package p79068.util.random;

import static org.junit.Assert.assertEquals;
import org.junit.Test;


public class IsaacTest extends RandomTest {
	
	protected Random getInstance() {
		return new Isaac(null);
	}
	
	
	@Test public void testBasic() {
		Random r = new Isaac(new int[256]);
		for (int i = 0; i < 256; i++)
			r.uniformInt();
		
		String[] output = {  // http://www.burtleburtle.net/bob/rand/randvect.txt
			"F650E4C8E448E96D98DB2FB4F5FAD54F433F1AFBEDEC154AD837048746CA4F9A",
			"5DE3743E88381097F1D444EB823CEDB66A83E1E04A5F6355C744243325890E2E",
			"7452E31957161DF638A824F3002ED71329F5544951C08D83D78CB99EA0CC74F3",
			"8F651659CBC8B7C2F5F71C6912AD6419E5792E1B860536B809B3CE98D45D6D81",
			"F3B2612917E38F8529CF72CE349947B0C998F9FFB5E13DAE32AE2A2BF7CF814C",
			"8EBFA303CF22E0640B923200ECA4D58AEF53CEC4D0F7B37D9C411A2AFFDF8A80",
			"B40E27BCB4D2F97644B89B08F37C71D51A70E7E90BDB9C3060DC5207B3C3F24B",
			"D7386806229749B54E232CD091DABC65A70E11018B87437E5781414FCDBC62E2",
			"8107C9FF69D2E4AE3B18E752B143B6886F4E077295138769943C3C74AFC17A97",
			"0FD439636A529B0BD8C58A6AA8BCC22D2DB35DFEA7A2F4026CB167DB538E1F4E",
			"7275E2771D3B8E97ECC5DC9115E3A5B90369661430AB93ECAC9FE69D7BC76811",
			"60EDA8DA28833522D5295EBC5ADB60E7F7E1CDD097166D14B67EC13A210F3925",
			"64AF0FEF0D0286843AEA3DECB058BAFBB8B0CCFCF2B5CC05E3A662D9814BC24C",
			"2364A1AA37C0ED052B36505C451E7EC85D2A542FE43D0FBB91C8D92560D4D5F8",
			"12A0594B9E8A51DACD49EBDB1B0DCDC1CD57C7F7E63444517DED386F2F36FA86",
			"A6D1210133BC405DB388D96CDB6DBE96FE29661C13EDC0CBCB0EEE4A70CC94AE",
			"DE11ED340606CF9F3A6CE38923D74F4EA37F63FF917BDEC2D73F72D40E7E0E67",
			"3D77D9A213ADD9228891B3DB01A9BD7056A001E3D51F093DCC033CE35AD0D3B0",
			"34105A8C6A123F57BD2E50247364944BE89B1A3B21835C4D9F39E2D9D405DED8",
			"294D37E5BCCAAEED35A124B56708A2BCB00960BA2A98121A4D8FAE820BB3263F",
			"12595A196A1075890809E49421C171EC884D682514C8009BB0B84E7B03FB88F4",
			"28E7CB789388B13BDD2DC1D5848F520A07C28CD168A3935872C9137D127DD430",
			"C613F1578C2F0D55F7D3F39F309BFB788406B13746C0A6F53718D59708607F04",
			"76904B6D04DB4E13CD7411A7B510CE0EBFC7F7CCB83F957AFDFEF62DC35E4580",
			"3FF1E5244112D96C02C9B944D5990DFBE7E265810D9C7E7E826DFA8966F1E0AB",
			"30BCC764EADEBEACED35E5EE0C571A7DE4F3A26AF7F58F7BADF6BC235D023E65",
			"1ED3FF4EEC46B0B6D2A93B51E75B41C97E315AEB61119A5A53245B7933F6D7B1",
			"CAE8DEBA50FC8194AFA92A6DC87C80064188BFCD8BACE62E78FFA5685597EC0F",
			"B4415F7D08294766AD56764309C36F903DDE9F394A0A283C18080C8E080C79EC",
			"79AE4C10CB9E15637CDD662F62D31911A4CA0CF15CF824CD3B708F991E16614C",
			"B6B9D7665DE87ABB7229EA81D5B2D75056E6CD21FE1E42D596DA2655C2B9AA36",
			"B8F6FD4A6A158D1001913FD3AF7D1FB80B5E435F90C107576554ABDA7A68710F",
			"82AC484FD7E1C7BE95C85EAA94A302F44D3CFBDA786B29081010B27582D53D12",
			"21E2A51C3D1E9150B059261DD0638E1A31860F0581F2864DFF4CFC350451516D",
			"BD086F26BC5654C165DFA427A82427F5582E3014B8D2486DC79A17499A1D7745",
			"8766BB541E04A7F73D3DFF8AD5EC6BF4DBEF7D9F36EC0EA31FEB2E4F15CFCC5C",
			"D8C423FBD0EF3CC9EB244925BA5590C8A5F48AC433C5321C613B67B2479C3A22",
			"E21339CC10D210AA931DD7E2EF05EE06B82F2703A385CB2C5D67133C877EB7B4",
			"1E3437F75AFB43AE53C078F394D904811D96458908063A85E13222281956B1E5",
			"31860F132E7B022F21182CA396F703AC46819E2E0D28FE523724D4DCA0EABE6B",
			"C66699FDC6112FDD19C1E69C04D3658A4B55DD9931907D62F854B5224D678F26",
			"22AE0582EAFED133E4A51D2184BD6DD6C1A513753F28EE63FB737B1A70A1660E",
			"8A8DFAA31BE79937F7476978513C1764531AC6BF12C06908001CDB951A4B6A53",
			"D067FCE512B2CFB69DDB477F740E006639DDF25ACC8BFA2DF1B20EAF64F2632C",
			"9783CDEE63BFD4D80084CFE575F4E9E219B48FD06C48DDD87A36AF9371865C4C",
			"9CE0199D867027D72CB7B77F84EF01DA72F5972F040F7074DF9AFA29C921F94E",
			"75C08A3618C1EF9AD649A428C5B719378A30738AD97CD348858129A6239E3B0A",
			"BBB8ABC480FAC4C2ECFCF20BD9D711F9E2A4EF71B5FE87C0BE8B06B2AAFEF5A7",
			"9C15DB3B0AEB81654389A84A253B1D7A19047C797CDC78A2D20ADF0356F55A71",
			"3E730FA8FD8650D8959E234EB7546681DAD1B22A142A6E858EF4BCE668235B9D",
			"85A13F8574096AE7A949BEA229322D0DD568385882846526403DAE086DD1943A",
			"E1279BFF9E7E4F041C3A4524484525E481D4CC5FE24124C0037464C0BF1BD691",
			"26CEB003275EAD3AC5BDE90826414FF3A30519ADD7B43ABE2CE5D3D588412761",
			"97CA2070E5FBB9C7276DF0B4308F751F37A97DF6C9CD808CFE4CB3803D469303",
			"AEE19096C0D5D42A4E823AD3F5F9CC3B4286619C9CA45E1C66C97340891AEC49",
			"45BAE606C798F04752649D6CCE86FDFC80C6E402D6EC2F2B27C822821FE26CE0",
			"92F57EA7DE462F4D07497CAE5A48755C721502DD6CBE7935836D80039EAD7F70",
			"9AB3A42F4C8652D632E39273E8FA38601DA4F25A0CD6EF8102503F7D8854A0A1",
			"9A30C4E88815715305EFE29457C4C9252887D96FC1A71E3CE9F841632D0985DE",
			"D21E796C6FB5CE5602614ABFC3C7BE2CB54FED6FA617A083C3142D8F6079E4CE",
			"CEFFC1471D0CB81BDC153E5FE36EF5BBD531161A165B10157AA114ED3F7579B3",
			"F7F395F1BC6172C7A86F875E0E6C51B3CDFEC2AF73C0E762824C2009C5A87748",
			"94D401258ABA3FFBD32BE0608C17EFF021E2547E07CFFAD905340E15F3310C92",
			"9D8D190886BA527FF943F672EF73FBF046D95CA5C54CD95B9D855E894BB5AF29",
		};
		
		for (int i = 0; i < 512; i++) {
			// Do an index reversal within each group of 256 because the
			// generated output array is presented backwards in the RNG
			int group = i / 256;
			int index = 255 - i % 256;
			int row = index / 8;
			int col = index % 8;
			int expected = (int)Long.parseLong(output[group * 32 + row].substring((col + 0) * 8, (col + 1) * 8), 16);
			assertEquals(expected, r.uniformInt());
		}
	}
	
}
